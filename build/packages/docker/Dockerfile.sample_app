# TODO: マルチステージビルド
# - ステージ1
#     - Goが動く環境を設定、ホスト側のGoプロジェクトをまるっとコピー、必要なモジュールをダウンロードした状態に
#       →コンテナに入って、go testを実行できる状態に
#     - Goアプリケーションの実行ファイルをビルドして実行
#       →コンテナ外から、単純にGoアプリケーションとして使用できる状態に
# - ステージ2
#     - めちゃくちゃ軽いベースイメージ上にステージ1で作ったGoアプリケーションの実行ファイルだけをコピーして実行

## ステージ1: Goアプリケーションの実行ファイルをビルド
#FROM golang:1.21.1 as builder
#
## /appディレクトリを作成して移動
#WORKDIR /app
#
## プロジェクトのコピー
#COPY . .
#
## 必要なGoモジュールをダウンロード
#RUN go mod download
#
## Goアプリケーションの実行ファイルをビルド
#RUN go build -o sample_app ./cmd/sample_app/*.go
#
## ステージ2: Goアプリケーションの実行ファイルを実行
#FROM alpine:3.20.2
#
## ステージ1でビルドしたGoアプリケーションの実行ファイルをルートディレクトリへコピー
#COPY --from=builder /app/sample_app /
#
## アプリケーションの実行
#CMD ["/sample_app"]


# Goアプリケーションをビルドして実行
FROM golang:1.23.2

# モックモジュールのインストール(実装作業に必要なものであり、アプリケーションのビルドに必要なものではない)
RUN go install go.uber.org/mock/mockgen@latest

# /appディレクトリの作成&移動
WORKDIR /app

# プロジェクトのコピー
COPY . .

# 必要なGoモジュールをダウンロード
RUN go mod download

# Goアプリケーション実行ファイルをビルドしてルートディレクトリに配置
RUN GOOS=linux GOARCH=amd64 go build -o /sample_app ./cmd/sample_app/*.go

# Goアプリケーションの実行
CMD ["/sample_app"]
