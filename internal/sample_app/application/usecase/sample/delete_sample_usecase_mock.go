// Code generated by MockGen. DO NOT EDIT.
// Source: delete_sample_usecase_interface.go
//
// Generated by this command:
//
//	mockgen -source=delete_sample_usecase_interface.go -destination=delete_sample_usecase_mock.go -package=sample -mock_names=IDeleteSampleUseCase=MockDeleteSampleUseCase
//

// Package sample is a generated GoMock package.
package sample

import (
	context "context"
	sample "modern-dev-env-app-sample/internal/sample_app/application/request/sample"
	sample0 "modern-dev-env-app-sample/internal/sample_app/application/response/sample"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeleteSampleUseCase is a mock of IDeleteSampleUseCase interface.
type MockDeleteSampleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteSampleUseCaseMockRecorder
	isgomock struct{}
}

// MockDeleteSampleUseCaseMockRecorder is the mock recorder for MockDeleteSampleUseCase.
type MockDeleteSampleUseCaseMockRecorder struct {
	mock *MockDeleteSampleUseCase
}

// NewMockDeleteSampleUseCase creates a new mock instance.
func NewMockDeleteSampleUseCase(ctrl *gomock.Controller) *MockDeleteSampleUseCase {
	mock := &MockDeleteSampleUseCase{ctrl: ctrl}
	mock.recorder = &MockDeleteSampleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteSampleUseCase) EXPECT() *MockDeleteSampleUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockDeleteSampleUseCase) Run(ctx context.Context, req *sample.DeleteSampleRequest) (*sample0.DeleteSampleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, req)
	ret0, _ := ret[0].(*sample0.DeleteSampleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockDeleteSampleUseCaseMockRecorder) Run(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDeleteSampleUseCase)(nil).Run), ctx, req)
}
