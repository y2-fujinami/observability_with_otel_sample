// Code generated by MockGen. DO NOT EDIT.
// Source: update_sample_usecase_interface.go
//
// Generated by this command:
//
//	mockgen -source=update_sample_usecase_interface.go -destination=update_sample_usecase_mock.go -package=sample -mock_names=IUpdateSampleUseCase=MockUpdateSampleUseCase
//

// Package sample is a generated GoMock package.
package sample

import (
	context "context"
	sample "modern-dev-env-app-sample/internal/sample_app/application/request/sample"
	sample0 "modern-dev-env-app-sample/internal/sample_app/application/response/sample"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUpdateSampleUseCase is a mock of IUpdateSampleUseCase interface.
type MockUpdateSampleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSampleUseCaseMockRecorder
	isgomock struct{}
}

// MockUpdateSampleUseCaseMockRecorder is the mock recorder for MockUpdateSampleUseCase.
type MockUpdateSampleUseCaseMockRecorder struct {
	mock *MockUpdateSampleUseCase
}

// NewMockUpdateSampleUseCase creates a new mock instance.
func NewMockUpdateSampleUseCase(ctrl *gomock.Controller) *MockUpdateSampleUseCase {
	mock := &MockUpdateSampleUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdateSampleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSampleUseCase) EXPECT() *MockUpdateSampleUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUpdateSampleUseCase) Run(ctx context.Context, req *sample.UpdateSampleRequest) (*sample0.UpdateSampleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, req)
	ret0, _ := ret[0].(*sample0.UpdateSampleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockUpdateSampleUseCaseMockRecorder) Run(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUpdateSampleUseCase)(nil).Run), ctx, req)
}
